name: Android E2E

on:
  pull_request:

jobs:
  android-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    env:
      CI: true
      EXPO_NO_TELEMETRY: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Hardware acceleration (as per emulator-runner examples)
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Toolchains
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Gradle caching & build scan summary (recommended by Gradle team)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # JS deps
      - name: Install root dependencies
        run: npm ci

      - name: Install example dependencies
        run: npm ci
        working-directory: example

      # ---------- AVD snapshot caching to speed up boots ----------
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-android-${{ runner.os }}-api-35-x86_64-pixel10

      # Create a cached snapshot (only when cache is cold)
      - name: Create AVD snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          profile: pixel_10
          # IMPORTANT: generate a snapshot (do NOT pass -no-snapshot or -no-snapshot-save here)
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          # Just boot and exit to create the cached snapshot
          script: echo "Generated AVD snapshot for caching."

      # ---------- Build & test using cached AVD ----------
      # Install Maestro CLI (official installer)
      - name: Install Maestro CLI
        uses: mobile-dev-inc/maestro@v1

      # Start emulator, build Debug APK, install, and run flows with JUnit output
      - name: Run Android E2E tests (Expo + Maestro)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          profile: pixel_10
          # Reuse the cached AVD and avoid writing a new snapshot
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          working-directory: example
          script: |
            # 1) Generate native project (no install to keep it fast)
            npx expo prebuild --platform android --no-install --non-interactive

            # 2) Build a DEBUG APK (no signing hassles in CI)
            cd android
            ./gradlew assembleDebug
            cd ..

            # 3) Install the APK and wait for the emulator to be ready
            adb wait-for-device
            adb install -r android/app/build/outputs/apk/debug/app-debug.apk

            # 4) Run Maestro flows with JUnit output for CI visibility
            maestro --version
            maestro test --format junit --output ../maestro-report.xml maestro/smoke.yaml

      # Always upload reports (so you can inspect failures)
      - name: Upload Maestro report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-results
          path: maestro-report.xml
